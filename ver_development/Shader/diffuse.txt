// 파일 : diffuse.txt
// 설명 : 난반사 조명을 수행하는 버텍스 셰이더
//
// 뷰 행렬, 투영 행렬, 환경 재질, 난반사 재질, 광원의 방향을 나타내는
// 조명 벡터 등을 보관하는 전역 변수들.
// 이 변수들은 애프릴케이션에서 초기화된다.
//

extern matrix ViewMatrix;
extern matrix ViewProjMatrix;

vector AmbientMtrl;
vector DiffuseMtrl;

vector LightDirection;

//
// 환경 조명의 강도(광원이 발산하는 환경과)와
// 난반사 조명의 강도(광원이 발산하는 난반사광)를
// 보관하는 전역 변수. 이 변수들은 셰이더 내에서 초기화된다.
//

vector DiffuseLightIntensity = {0.0f, 0.0f, 1.0f, 1.0f};
vector AmbientLightIntensity = {0.0f, 0.0f, 0.2f, 1.0f};

//
// 입력과 출력 구조체
//

struct VS_INPUT{
 vector position : POSITION;
 vector normal : NORMAL;
};

struct VS_OUTPUT{
 vector position : POSITION;
 vector diffuse : COLOR;
};

//
// 메인
//

VS_OUTPUT Main(VS_INPUT input){
 // 출력 인스턴스의 모든 멤버를 0으로 채운다.
 VS_OUTPUT output = (VS_OUTPUT)0;

 //
 // position을 동종 클립 공간으로 변환하고
 // 이를 output.position 멤버에 보관한다.
 //
 output.position = mul(input.position, ViewProjMatrix);

 //
 // 조명과 법선을 뷰 스페이스로 변환한다.
 // 여기에서 변환하는 것은 포인트가 아닌 벡터이므로 
 // w 성분을 0으로 지정한다.
 // 
 LightDirection.w = 0.0f;

 input.normal.w = 0.0f;
 LightDirection = mul(LightDirection, ViewMatrix);
 input.normal = mul(input.normal, ViewMatrix);

 //
 // 광원과 법선 간 각도의 코사인을 계산한다.
 //
 float s = dot(LightDirection, input.normal);
 //
 // 표면과 조명 간의 각도가 90도를 넘을 경우
 // 표면은 전혀 빛을 받지 못한다는 것을 기억하자.
 // 따라서 각도가 90도 보다 큰 경우에는
 // s를 0으로 지정하여 표면이 빛을 받지 않도록 한다.
 //
 if(s < 0.0f)
	s = 0.0f;

 //
 // 반사되는 환경광은 환경 재질 벡터와 환경 광원 강도 벡터
 // 간의 성분 단위의 곱을 수행함으로서 얻을 수 있다.
 // 
 // 반사되는 난반사광은 난반사 재질 벡터와 난반사 광원 강도 벡터
 // 간의 성분 단위의 곱을 수행함으로서 얻을 수 있다.
 // 여기에 각각의 버텍스가 광원으로부터 받는 빛의 양을
 // 조절하는 셰이딩 스칼라 s로 각 성분의 크기를 조정한다.
 //
 // 환경과 난반사 성분의 합을 통해
 // 최종 버텍스 컬러를 얻을 수 있다.
 //

 output.diffuse = (AmbientMtrl & AmbientLightIntensity) + (s * (DiffuseLightIntensity * DiffuseMtrl));

 return output;
}